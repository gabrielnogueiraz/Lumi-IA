import { TaskService, TaskCreateData } from './taskService'
import { taskManager } from './taskManager'
import { parseUserIntentFromLumi, ParsedIntent, hasTaskOrEmotionalPotential, decideBoardForTask } from '../../utils/intentParser'
import { MemoryService } from '../memory/memoryService'
import { prisma } from '../../prisma/client'

class TaskAssistant {
  private taskService: TaskService
  private taskManager = taskManager
  private memoryService: MemoryService

  constructor() {
    this.taskService = new TaskService()
    this.memoryService = new MemoryService()
  }

  /**
   * Busca os quadros do usu√°rio para contexto na an√°lise de inten√ß√£o
   */
  private async getUserBoards(userId: string): Promise<Array<{ id: string; title: string }>> {
    try {
      const boards = await prisma.boards.findMany({
        where: { userId },
        select: { id: true, title: true },
        orderBy: { createdAt: 'asc' }
      })
      
      return boards
    } catch (error) {
      console.error('Erro ao buscar quadros do usu√°rio:', error)
      return []
    }
  }

  async processTaskRequest(
    userId: string, 
    message: string,
    userName: string
  ): Promise<{
    success: boolean
    message: string
    taskAction?: string
    conflictDetected?: boolean
    suggestionsMessage?: string
    isEmotionalResponse?: boolean
    emotionalState?: string
  }> {
    try {
      // Verifica√ß√£o expandida - inclui potencial emocional
      if (!hasTaskOrEmotionalPotential(message)) {
        return {
          success: false,
          message: this.getHelpfulResponse(userName, message)
        }
      }

      // Busca os quadros do usu√°rio para contexto
      const userBoards = await this.getUserBoards(userId)

      // Usa o novo sistema LLM emocionalmente inteligente
      const intent = await parseUserIntentFromLumi(message, userId, userBoards)
      
      // Se foi detectada inten√ß√£o emocional, retorna resposta adequada
      if (this.isEmotionalIntent(intent.intent)) {
        return {
          success: true,
          message: this.getEmotionalResponse(intent, userName),
          isEmotionalResponse: true,
          emotionalState: intent.emotionalState
        }
      }
      
      if (intent.intent === 'none' || (intent.confidence && intent.confidence < 0.5)) {
        return {
          success: false,
          message: this.getHelpfulResponse(userName, message)
        }
      }

      switch (intent.intent) {
        case 'create_task':
          return await this.handleCreateTask(userId, intent, userName, userBoards)
        
        case 'create_board':
          return await this.handleCreateBoard(userId, intent, userName)
        
        case 'update_task':
          return await this.handleUpdateTask(userId, intent, userName)
        
        case 'delete_task':
          return await this.handleDeleteTask(userId, intent, userName)
        
        case 'complete_task':
          return await this.handleCompleteTask(userId, intent, userName)
        
        case 'list_tasks':
          return await this.handleListTasks(userId, userName)
        
        case 'search_tasks':
          return await this.handleSearchTasks(userId, intent, userName)
        
        default:
          return {
            success: false,
            message: `${userName}, n√£o consegui entender exatamente o que voc√™ precisa. Que tal me contar de forma diferente? üòä`
          }
      }
    } catch (error) {
      console.error('Erro no processamento de tarefa:', error)
      return {
        success: false,
        message: `Ops, ${userName}! Tive um probleminha t√©cnico. Pode tentar novamente? Estou aqui para ajudar! ü§ñ`
      }
    }
  }

  /**
   * Verifica se a inten√ß√£o √© emocional (n√£o relacionada a tarefas pr√°ticas)
   */
  private isEmotionalIntent(intent: string): boolean {
    const emotionalIntents = [
      'seek_support', 'express_confusion', 'feeling_overwhelmed', 
      'procrastinating', 'seeking_motivation', 'feeling_stuck',
      'sharing_excitement', 'expressing_frustration', 'checking_in',
      'brainstorming', 'planning_assistance'
    ]
    return emotionalIntents.includes(intent)
  }

  /**
   * Gera resposta emp√°tica para inten√ß√µes emocionais
   */
  private getEmotionalResponse(intent: ParsedIntent, userName: string): string {
    const responses = {
      seek_support: [
        `${userName}, estou aqui para te ajudar! ü§ó Me conta mais sobre o que voc√™ est√° precisando e vamos resolver juntos.`,
        `Claro que vou te ajudar, ${userName}! üíõ Pode compartilhar mais detalhes sobre o que te preocupa?`,
        `${userName}, voc√™ n√£o est√° sozinho nisso! üåü Me fala mais sobre o que precisa e vamos encontrar uma solu√ß√£o.`
      ],
      
      express_confusion: [
        `Entendo que voc√™ est√° se sentindo perdido, ${userName}. üß≠ Vamos organizar isso juntos, passo a passo. Me conta sobre o que especificamente est√° te confundindo?`,
        `${userName}, √© super normal se sentir confuso √†s vezes! üí≠ Que tal quebrarmos isso em partes menores? Por onde voc√™ gostaria de come√ßar?`,
        `Vamos juntos clarear essa confus√£o, ${userName}! üîç Me explica um pouco mais sobre a situa√ß√£o e eu te ajudo a organizar as ideias.`
      ],
      
      feeling_overwhelmed: [
        `${userName}, respira fundo comigo! üåä Quando tem muita coisa, o melhor √© focar em uma de cada vez. Qual √© a mais urgente agora?`,
        `Ei, ${userName}, eu vejo que est√° pesado demais! üòÆ‚Äçüí® Que tal organizarmos por prioridade? N√£o precisa fazer tudo hoje.`,
        `${userName}, vamos desacelerar um pouco? üõë Me conta quais s√£o as principais coisas que est√£o te sobrecarregando e vamos priorizar juntos.`
      ],
      
      procrastinating: [
        `${userName}, √†s vezes a gente n√£o est√° no clima mesmo! üòÖ Que tal come√ßarmos com algo bem pequeno? S√≥ 5 minutinhos?`,
        `Entendo, ${userName}! üêå Procrastina√ß√£o √© normal. Qual seria a menor a√ß√£o poss√≠vel que voc√™ conseguiria fazer agora?`,
        `${userName}, que tal mudamos a estrat√©gia? üéØ Em vez de "fazer tudo", que tal "s√≥ come√ßar"? O primeiro passo pode ser bem simples!`
      ],
      
      seeking_motivation: [
        `${userName}, voc√™ veio ao lugar certo! ‚ö° Lembra do seu potencial incr√≠vel? Voc√™ j√° conseguiu tantas coisas! O que te motivava nessas conquistas?`,
        `Vamos reacender essa chama, ${userName}! üî• Me conta sobre um objetivo que te empolga e vamos criar um plano para chegar l√°!`,
        `${userName}, voc√™ √© muito mais forte do que imagina! üí™ Que tal definirmos uma pequena vit√≥ria para hoje? Algo que vai te dar aquele gosto de "consegui"!`
      ],
      
             feeling_stuck: [
         `${userName}, j√° passou por isso antes e saiu! üö™ √Äs vezes precisamos de uma perspectiva diferente. Me conta mais sobre onde voc√™ sente que travou?`,
         `Vamos destravar isso juntos, ${userName}! üîì Que tal tentarmos uma abordagem completamente diferente? O que voc√™ ainda n√£o tentou?`,
         `${userName}, estar "travado" √© s√≥ uma pausa para reorganizar a estrat√©gia! üîÑ Me fala sobre o que voc√™ j√° tentou e vamos encontrar novos caminhos.`
       ],
      
      sharing_excitement: [
        `${userName}, que energia incr√≠vel! ‚ö° Adorei ver voc√™ assim empolgado! Me conta mais sobre o que te deixou t√£o animado!`,
        `ADOREI, ${userName}! üéâ Essa empolga√ß√£o √© contagiante! Como podemos aproveitar essa energia toda para fazer coisas incr√≠veis?`,
        `${userName}, que maravilha! ‚ú® Voc√™ radiando energia positiva assim √© lindo de ver! Conta mais dessa novidade!`
      ],
      
      expressing_frustration: [
        `${userName}, entendo sua frustra√ß√£o! üò§ √Äs vezes as coisas realmente n√£o funcionam como queremos. Me conta o que est√° te irritando?`,
        `Respira, ${userName}! üòÆ‚Äçüí® Frustra√ß√µes fazem parte, mas vamos juntos encontrar uma sa√≠da. O que especificamente n√£o est√° funcionando?`,
        `${userName}, v√°lido estar frustrado! ü§Ø Que tal darmos uma pausa e pensarmos numa abordagem diferente? Me explica o que est√° travando.`
      ],
      
      checking_in: [
        `Oi, ${userName}! üòä Que bom ver voc√™ por aqui! Como voc√™ est√° se sentindo hoje? Como posso te ajudar?`,
        `${userName}, sempre um prazer! üíõ E a√≠, como est√£o as coisas? Precisa de alguma coisa espec√≠fica ou s√≥ quer bater um papo?`,
        `Hey, ${userName}! üëã Como tem passado? Estou aqui se precisar de qualquer coisa - desde organizar a agenda at√© s√≥ conversar!`
      ],
      
      brainstorming: [
        `${userName}, adorei! üí° Sess√£o de brainstorming √© comigo mesma! Me conta mais sobre o projeto e vamos gerar ideias incr√≠veis juntos!`,
        `Perfeito, ${userName}! üß†‚ú® Adoro ajudar com ideias criativas! Me d√° mais contexto sobre o que voc√™ est√° pensando e vamos expandir isso!`,
        `${userName}, que legal! üé® Vamos soltar a criatividade! Me fala sobre o tema e vamos fazer uma chuva de ideias bem produtiva!`
      ],
      
      planning_assistance: [
        `${userName}, organiza√ß√£o √© minha especialidade! üìã Vamos estruturar isso direitinho! Me conta sobre o que voc√™ quer planejar.`,
        `√ìtimo, ${userName}! üóìÔ∏è Adoro ajudar a organizar e planejar! Me d√° mais detalhes sobre o que voc√™ precisa estruturar.`,
        `${userName}, vamos fazer um planejamento nota 10! üìà Me conta sobre o que voc√™ quer organizar e qual √© o seu objetivo principal.`
      ]
    }

    const intentResponses = responses[intent.intent as keyof typeof responses] || responses.seek_support
    return intentResponses[Math.floor(Math.random() * intentResponses.length)]
  }

  private async handleCreateTask(
    userId: string, 
    intent: ParsedIntent, 
    userName: string,
    userBoards?: Array<{ id: string; title: string }>
  ): Promise<any> {
    
    if (!intent.title) {
      return {
        success: false,
        message: `${userName}, preciso saber o que voc√™ quer agendar! üìù Pode me dar mais detalhes sobre essa tarefa?`
      }
    }

    try {
      // üîß CORRE√á√ÉO PROBLEMA 2: Decis√£o inteligente sobre qual quadro usar
      const boardDecision = decideBoardForTask(intent, userBoards || [])
      
      console.log('üîç DEBUG - Board Decision:', boardDecision)
      
      let targetColumnId: string
      let boardInfo = ''
      
      if (boardDecision.action === 'create_new') {
        // Criar novo quadro
        const newBoard = await prisma.boards.create({
          data: {
            id: `board_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            title: boardDecision.boardName,
            userId: userId,
            updatedAt: new Date()
          }
        })
        
        // Criar coluna padr√£o "A fazer" no novo quadro
        const defaultColumn = await prisma.columns.create({
          data: {
            id: `col_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            title: 'A fazer',
            order: 1,
            boardId: newBoard.id,
            updatedAt: new Date()
          }
        })
        
        targetColumnId = defaultColumn.id
        boardInfo = ` no novo quadro "${newBoard.title}"`
        
        // Salvar na mem√≥ria que criou um quadro
        await this.memoryService.create({
          userId,
          type: 'PRODUCTIVITY_PATTERN',
          content: `Criou quadro "${newBoard.title}" para organizar tarefas de ${boardDecision.reason}`,
          importance: 'MEDIUM',
          tags: ['board_creation', 'organization']
        })
        
      } else if (boardDecision.action === 'use_existing' && boardDecision.boardId) {
        // üîß CORRE√á√ÉO: Usar quadro existente - buscar primeira coluna dispon√≠vel
        const firstColumn = await prisma.columns.findFirst({
          where: { boardId: boardDecision.boardId },
          orderBy: { order: 'asc' }
        })
        
        if (!firstColumn) {
          // Se n√£o tem colunas, criar uma padr√£o
          const defaultColumn = await prisma.columns.create({
            data: {
              id: `col_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
              title: 'A fazer',
              order: 1,
              boardId: boardDecision.boardId,
              updatedAt: new Date()
            }
          })
          targetColumnId = defaultColumn.id
        } else {
          targetColumnId = firstColumn.id
        }
        
        boardInfo = ` no quadro "${boardDecision.boardName}"`
      } else {
        // Fallback: usar coluna padr√£o do usu√°rio
        targetColumnId = await this.taskService.getDefaultColumn(userId)
        boardInfo = ` no quadro padr√£o`
      }

      // Criar os dados da tarefa
      const taskData: TaskCreateData = {
        title: intent.title,
        description: intent.description,
        priority: intent.priority || 'MEDIUM',
        startAt: intent.startAt ? new Date(intent.startAt) : undefined,
        endAt: intent.endAt ? new Date(intent.endAt) : undefined,
        pomodoroGoal: intent.pomodoroGoal || 1,
        columnId: targetColumnId
      }

      // Usar o TaskService para criar a tarefa
      const newTask = await this.taskService.createTask(userId, taskData)

      // Salvar padr√£o na mem√≥ria
      await this.memoryService.create({
        userId,
        type: 'PRODUCTIVITY_PATTERN',
        content: `Criou tarefa "${newTask.title}" com prioridade ${newTask.priority}${newTask.startAt ? ` para ${newTask.startAt.toLocaleString('pt-BR')}` : ''}${boardInfo}`,
        importance: 'MEDIUM',
        tags: ['task_creation', newTask.priority.toLowerCase(), ...(intent.tags || [])]
      })

      // üîß CORRE√á√ÉO PROBLEMA 1: Gerar resposta personalizada com timezone correto
      const timeInfo = newTask.startAt 
        ? ` para ${this.formatDate(newTask.startAt)} √†s ${this.formatTimeWithCorrectTimezone(newTask.startAt)}`
        : ''

      const priorityText = this.getPriorityDescription(newTask.priority)
      const successMessage = this.getCreationSuccessMessage(userName, newTask.title, timeInfo + boardInfo, priorityText)

      return {
        success: true,
        taskAction: 'CREATED',
        message: successMessage,
        suggestionsMessage: this.getTaskSuggestion(newTask.priority, newTask.title, boardDecision.boardName)
      }

    } catch (error) {
      console.error('Erro ao criar tarefa:', error)
      return {
        success: false,
        message: `${userName}, tive um problema ao criar a tarefa. Pode tentar novamente? ü§ñ`
      }
    }
  }

  private async handleCreateBoard(
    userId: string,
    intent: ParsedIntent,
    userName: string
  ): Promise<any> {
    if (!intent.boardName) {
      return {
        success: false,
        message: `${userName}, preciso saber qual o nome do quadro que voc√™ quer criar! üìã`
      }
    }

    try {
      // Verificar se j√° existe um quadro com o mesmo nome
      const existingBoard = await prisma.boards.findFirst({
        where: {
          userId,
          title: {
            equals: intent.boardName,
            mode: 'insensitive'
          }
        }
      })

      if (existingBoard) {
        return {
          success: false,
          message: `${userName}, voc√™ j√° tem um quadro chamado "${existingBoard.title}"! Quer usar esse ou criar com outro nome? ü§î`
        }
      }

      // Criar novo quadro
      const newBoard = await prisma.boards.create({
        data: {
          id: `board_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
          title: intent.boardName,
          userId: userId,
          updatedAt: new Date()
        }
      })

      // Criar colunas padr√£o
      const defaultColumns = [
        { title: 'A fazer', order: 1 },
        { title: 'Em andamento', order: 2 },
        { title: 'Conclu√≠do', order: 3 }
      ]

      for (const columnData of defaultColumns) {
        await prisma.columns.create({
          data: {
            id: `col_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            title: columnData.title,
            order: columnData.order,
            boardId: newBoard.id,
            updatedAt: new Date()
          }
        })
      }

      // Salvar na mem√≥ria
      await this.memoryService.create({
        userId,
        type: 'PRODUCTIVITY_PATTERN',
        content: `Criou quadro "${newBoard.title}" para organiza√ß√£o de tarefas`,
        importance: 'MEDIUM',
        tags: ['board_creation', 'organization']
      })

      return {
        success: true,
        taskAction: 'BOARD_CREATED',
        message: `‚úÖ Perfeito, ${userName}! Criei o quadro "${newBoard.title}" com as colunas padr√£o. Agora voc√™ pode organizar suas tarefas l√°! üìã‚ú®`
      }

    } catch (error) {
      console.error('Erro ao criar quadro:', error)
      return {
        success: false,
        message: `${userName}, tive um problema ao criar o quadro. Pode tentar novamente? ü§ñ`
      }
    }
  }

  private getPriorityDescription(priority: string): string {
    switch (priority) {
      case 'HIGH': return 'alta prioridade'
      case 'LOW': return 'baixa prioridade'
      default: return 'prioridade m√©dia'
    }
  }

  // üîß CORRE√á√ÉO PROBLEMA 1: M√©todo para formatar hor√°rio brasileiro
  private formatTimeWithCorrectTimezone(date: Date): string {
    // Como a data j√° vem correta do LLM (agora com prompt corrigido), 
    // apenas formatamos normalmente
    return date.toLocaleTimeString('pt-BR', { 
      hour: '2-digit', 
      minute: '2-digit'
    })
  }

  private formatDate(date: Date): string {
    const today = new Date()
    const tomorrow = new Date(today)
    tomorrow.setDate(today.getDate() + 1)
    
    if (date.toDateString() === today.toDateString()) {
      return 'hoje'
    } else if (date.toDateString() === tomorrow.toDateString()) {
      return 'amanh√£'
    } else {
      return date.toLocaleDateString('pt-BR', { weekday: 'long', day: 'numeric', month: 'long' })
    }
  }

  private getCreationSuccessMessage(userName: string, title: string, timeInfo: string, priorityText: string): string {
    const successMessages = [
      `Pronto, ${userName}! ‚úÖ Agendei "${title}"${timeInfo}. Definida como ${priorityText}.`,
      `Perfeito! üéØ "${title}" est√° na sua agenda${timeInfo} com ${priorityText}.`,
      `√ìtimo, ${userName}! üìÖ "${title}" foi adicionada${timeInfo}. Prioridade: ${priorityText}.`,
      `Feito! ‚≠ê "${title}" j√° est√° marcada${timeInfo} como ${priorityText}.`
    ]
    
    return successMessages[Math.floor(Math.random() * successMessages.length)]
  }

  private async handleListTasks(userId: string, userName: string): Promise<any> {
    try {
      // Buscar tarefas do usu√°rio
      const tasks = await prisma.tasks.findMany({
        where: { 
          userId,
          completed: false // S√≥ tarefas n√£o conclu√≠das
        },
        include: {
          columns: {
            include: {
              boards: true
            }
          }
        },
        orderBy: [
          { priority: 'desc' },
          { startAt: 'asc' }
        ]
      })

      if (tasks.length === 0) {
        return {
          success: true,
          taskAction: 'LISTED_EMPTY',
          message: `${userName}, sua agenda est√° limpinha! üéâ Hora de relaxar ou planejar novas conquistas?`
        }
      }

      // Agrupar tarefas por data
      const today = new Date()
      const tomorrow = new Date(today)
      tomorrow.setDate(today.getDate() + 1)
      
      const todayTasks = tasks.filter(task => 
        task.startAt && this.isSameDate(task.startAt, today)
      )
      
      const tomorrowTasks = tasks.filter(task => 
        task.startAt && this.isSameDate(task.startAt, tomorrow)
      )
      
      const otherTasks = tasks.filter(task => 
        !task.startAt || (!this.isSameDate(task.startAt, today) && !this.isSameDate(task.startAt, tomorrow))
      )

      let message = `üìã Aqui est√° sua agenda, ${userName}:\n\n`

      // Tarefas de hoje
      if (todayTasks.length > 0) {
        message += `üåÖ **HOJE (${today.toLocaleDateString('pt-BR', { day: 'numeric', month: 'short' })})**\n`
        todayTasks.forEach(task => {
          // üîß CORRE√á√ÉO: Usar formata√ß√£o de timezone corrigida
          const timeStr = task.startAt ? ` √†s ${this.formatTimeWithCorrectTimezone(task.startAt)}` : ''
          const priorityIcon = this.getPriorityIcon(task.priority)
          const boardName = task.columns?.boards?.title || 'Sem quadro'
          message += `${priorityIcon} ${task.title}${timeStr} (${boardName})\n`
        })
        message += '\n'
      }

      // Tarefas de amanh√£
      if (tomorrowTasks.length > 0) {
        message += `üå§Ô∏è **AMANH√É (${tomorrow.toLocaleDateString('pt-BR', { day: 'numeric', month: 'short' })})**\n`
        tomorrowTasks.forEach(task => {
          // üîß CORRE√á√ÉO: Usar formata√ß√£o de timezone corrigida
          const timeStr = task.startAt ? ` √†s ${this.formatTimeWithCorrectTimezone(task.startAt)}` : ''
          const priorityIcon = this.getPriorityIcon(task.priority)
          const boardName = task.columns?.boards?.title || 'Sem quadro'
          message += `${priorityIcon} ${task.title}${timeStr} (${boardName})\n`
        })
        message += '\n'
      }

      // Outras tarefas
      if (otherTasks.length > 0) {
        message += `üìÖ **OUTRAS TAREFAS**\n`
        otherTasks.forEach(task => {
          // üîß CORRE√á√ÉO: Usar formata√ß√£o de timezone corrigida
          const dateStr = task.startAt ? `${this.formatDate(task.startAt)} √†s ${this.formatTimeWithCorrectTimezone(task.startAt)}` : 'Sem data'
          const priorityIcon = this.getPriorityIcon(task.priority)
          const boardName = task.columns?.boards?.title || 'Sem quadro'
          message += `${priorityIcon} ${task.title} - ${dateStr} (${boardName})\n`
        })
      }

      message += `\nüí° Total: ${tasks.length} tarefa${tasks.length > 1 ? 's' : ''} pendente${tasks.length > 1 ? 's' : ''}`

      return {
        success: true,
        taskAction: 'LISTED',
        message
      }

    } catch (error) {
      console.error('Erro ao listar tarefas:', error)
      return {
        success: false,
        message: `${userName}, tive um problema ao buscar suas tarefas. Tente novamente! ü§ñ`
      }
    }
  }

  private isSameDate(date1: Date, date2: Date): boolean {
    return date1.toDateString() === date2.toDateString()
  }

  private getPriorityIcon(priority: string): string {
    switch (priority) {
      case 'HIGH': return 'üî¥'
      case 'LOW': return 'üü¢' 
      default: return 'üü°'
    }
  }

  private async handleCompleteTask(
    userId: string, 
    intent: ParsedIntent, 
    userName: string
  ): Promise<any> {
    return {
      success: false,
      message: `${userName}, funcionalidade ainda n√£o implementada! üöß`
    }
  }

  private async handleDeleteTask(
    userId: string, 
    intent: ParsedIntent, 
    userName: string
  ): Promise<any> {
    return {
      success: false,
      message: `${userName}, funcionalidade ainda n√£o implementada! üöß`
    }
  }

  private async handleUpdateTask(
    userId: string, 
    intent: ParsedIntent, 
    userName: string
  ): Promise<any> {
    return {
      success: false,
      message: `${userName}, funcionalidade ainda n√£o implementada! üöß`
    }
  }

  private async handleSearchTasks(
    userId: string, 
    intent: ParsedIntent, 
    userName: string
  ): Promise<any> {
    return {
      success: false,
      message: `${userName}, funcionalidade ainda n√£o implementada! üöß`
    }
  }

  private getTaskSuggestion(priority: string, taskTitle?: string, boardName?: string): string {
    const taskContext = (taskTitle || '').toLowerCase()
    const board = (boardName || '').toLowerCase()
    
    // Dicas contextuais baseadas no tipo de tarefa/quadro
    if (board.includes('academia') || board.includes('treino') || board.includes('exerc√≠cio') || 
        taskContext.includes('treino') || taskContext.includes('academia') || taskContext.includes('exerc√≠cio')) {
      const tips = [
        'üèãÔ∏è Dica: Hidrate-se bem durante o treino. Quer que eu te lembre de beber √°gua?',
        '‚ö° Dica: Para treino de perna, foque em exerc√≠cios compostos como agachamento e stiff. Precisa de sugest√µes?',
        'üéØ Dica: Registre seus pesos e s√©ries para acompanhar evolu√ß√£o. Posso criar lembretes para isso!',
        'üßò Dica: N√£o esque√ßa do alongamento p√≥s-treino. Quer que eu adicione na sua agenda?'
      ]
      return tips[Math.floor(Math.random() * tips.length)]
    }
    
    if (board.includes('trabalho') || board.includes('profissional') || 
        taskContext.includes('reuni√£o') || taskContext.includes('projeto') || taskContext.includes('apresenta√ß√£o')) {
      const tips = [
        'üìù Dica: Para reuni√µes importantes, prepare uma agenda antecipadamente. Posso te ajudar a estruturar?',
        'üéØ Dica: Defina objetivos claros para cada projeto. Quer quebrar essa tarefa em etapas menores?',
        '‚è∞ Dica: Reserve 15 min antes de reuni√µes para revisar materiais. Adiciono um lembrete?',
        'üí° Dica: Use a t√©cnica Pomodoro para projetos complexos. Posso configurar intervalos para voc√™?',
        'üìä Dica: Documente decis√µes importantes. Precisa de ajuda para organizar um template?'
      ]
      return tips[Math.floor(Math.random() * tips.length)]
    }
    
    if (board.includes('estudo') || board.includes('faculdade') || board.includes('curso') ||
        taskContext.includes('estudar') || taskContext.includes('prova') || taskContext.includes('aula')) {
      const tips = [
        'üìö Dica: Use t√©cnicas de revis√£o espa√ßada para melhor reten√ß√£o. Posso criar um cronograma?',
        'üß† Dica: Fa√ßa pausas de 15 min a cada hora de estudo. Adiciono lembretes autom√°ticos?',
        '‚úèÔ∏è Dica: Pratique exerc√≠cios antes da prova. Quer que eu programe sess√µes de revis√£o?',
        'üéØ Dica: Divida conte√∫dos grandes em blocos menores. Precisa de ajuda para organizar?',
        'üí° Dica: Ensine o que aprendeu para fixar melhor. Posso sugerir formas de praticar?'
      ]
      return tips[Math.floor(Math.random() * tips.length)]
    }
    
    if (board.includes('sa√∫de') || board.includes('m√©dico') || 
        taskContext.includes('m√©dico') || taskContext.includes('consulta') || taskContext.includes('exame')) {
      const tips = [
        'üìã Dica: Leve hist√≥rico m√©dico e lista de medicamentos. Quer que eu organize isso?',
        '‚è∞ Dica: Chegue 15 min antes da consulta. Adiciono um lembrete?',
        'üíä Dica: Anote orienta√ß√µes m√©dicas durante a consulta. Precisa de um template?',
        'üì± Dica: Confirme a consulta um dia antes. Posso programar um lembrete autom√°tico?'
      ]
      return tips[Math.floor(Math.random() * tips.length)]
    }
    
    if (board.includes('compras') || board.includes('mercado') || 
        taskContext.includes('comprar') || taskContext.includes('mercado')) {
      const tips = [
        'üõí Dica: Fa√ßa uma lista organizada por se√ß√µes do mercado. Posso te ajudar a estruturar?',
        'üí∞ Dica: Defina um or√ßamento antes de sair. Quer que eu calcule um valor ideal?',
        'üìù Dica: Verifique o que j√° tem em casa primeiro. Posso criar uma checklist?',
        'ü•ó Dica: Planeje refei√ß√µes da semana para comprar apenas o necess√°rio. Precisa de ideias?',
        '‚è∞ Dica: Evite ir ao mercado com fome para n√£o comprar por impulso!'
      ]
      return tips[Math.floor(Math.random() * tips.length)]
    }
    
    // Dicas baseadas na prioridade quando n√£o h√° contexto espec√≠fico
    switch (priority) {
      case 'HIGH':
        const highPriorityTips = [
          'üî• Dica: Tarefas urgentes s√£o melhores feitas logo pela manh√£! Quer reorganizar sua agenda?',
          '‚ö° Dica: Elimine distra√ß√µes para tarefas importantes. Posso sugerir t√©cnicas de foco?',
          'üéØ Dica: Quebre tarefas grandes em etapas menores. Precisa de ajuda para planejar?',
          'üí™ Dica: Use sua energia m√°xima para prioridades altas. Quer dicas de produtividade?'
        ]
        return highPriorityTips[Math.floor(Math.random() * highPriorityTips.length)]
        
      case 'LOW':
        const lowPriorityTips = [
          'üòå Dica: Tarefas simples s√£o √≥timas para intervalos entre atividades importantes!',
          'üå± Dica: Use tarefas leves para fazer pausas ativas. Quer sugest√µes?',
          'üì¶ Dica: Agrupe v√°rias tarefas simples e fa√ßa de uma vez s√≥!',
          '‚è∞ Dica: Reserve hor√°rios vagos para completar pend√™ncias menores.'
        ]
        return lowPriorityTips[Math.floor(Math.random() * lowPriorityTips.length)]
        
      default:
        const mediumPriorityTips = [
          'üìä Dica: Organize tarefas por contexto para ser mais eficiente. Posso te ajudar?',
          '‚öñÔ∏è Dica: Balance tarefas m√©dias com as de alta prioridade no seu dia!',
          '‚è±Ô∏è Dica: Use blocos de tempo para tarefas de complexidade m√©dia.',
          'üéØ Dica: Mantenha foco mas sem press√£o excessiva. Precisa de t√©cnicas de concentra√ß√£o?'
        ]
        return mediumPriorityTips[Math.floor(Math.random() * mediumPriorityTips.length)]
    }
  }

  private getHelpfulResponse(userName: string, message: string): string {
    return `${userName}, n√£o consegui entender exatamente o que voc√™ precisa com suas tarefas. ü§î\n\n` +
           `Que tal tentar algo como:\n` +
           `‚Ä¢ "Adicionar [tarefa] para [quando]"\n` +
           `‚Ä¢ "Listar minhas tarefas"\n` +
           `‚Ä¢ "Completei [tarefa]"\n\n` +
           `Ou me conte de outra forma o que voc√™ precisa! üòä`
  }

  private isTaskRelatedQuery(message: string): boolean {
    const lowerMessage = message.toLowerCase()
    const taskKeywords = [
      'tarefa', 'agenda', 'compromisso', 'reuni√£o', 'agendar', 'marcar',
      'cancelar', 'remarcar', 'hor√°rio', 'programa√ß√£o', 'to-do'
    ]
    
    return taskKeywords.some(keyword => lowerMessage.includes(keyword))
  }
}

export { TaskAssistant }