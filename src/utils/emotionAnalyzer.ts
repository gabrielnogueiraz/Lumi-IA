/**
 * üéØ ANALISADOR EMOCIONAL MELHORADO DA LUMI
 * 
 * MELHORIAS IMPLEMENTADAS PARA CORRIGIR SUPERDETEC√á√ÉO DE CONFUS√ÉO:
 * 
 * 1. üîç CLASSIFICA√á√ÉO INTELIGENTE DE PERGUNTAS
 *    - Distingue perguntas informacionais de confus√£o emocional real
 *    - Classifica perguntas t√©cnicas como "curious" em vez de "confused"
 *    - Usa regex patterns para identificar perguntas neutras
 * 
 * 2. üéöÔ∏è SISTEMA DE PONTUA√á√ÉO EQUILIBRADO
 *    - Reduziu peso de palavras-chave gen√©ricas (0.8 vs 1.0)
 *    - Mant√©m peso alto para express√µes indiretas espec√≠ficas (3.0)
 *    - Remove emo√ß√µes com pontua√ß√£o muito baixa (<0.5)
 * 
 * 3. üõ°Ô∏è FILTROS DE NEUTRALIDADE
 *    - Detecta padr√µes neutros/casuais e reduz intensidade emocional
 *    - Ignora cumprimentos, agradecimentos e express√µes cotidianas
 *    - Contexto casual reduz peso das detec√ß√µes emocionais
 * 
 * 4. üß† CONTEXTO CONVERSACIONAL
 *    - Considera hist√≥rico da conversa para ajustar an√°lise
 *    - Detecta padr√µes de perguntas frequentes vs confus√£o real
 *    - Ajusta confian√ßa baseado na consist√™ncia emocional
 * 
 * 5. ‚úÖ SISTEMA DE VALIDA√á√ÉO FINAL
 *    - Previne classifica√ß√µes obviamente incorretas
 *    - Remove contradi√ß√µes emocionais (ex: happy + sad)
 *    - Aplica regras de sanidade baseadas no contexto
 * 
 * 6. üéØ AN√ÅLISE CONTEXTUAL REFINADA
 *    - S√≥ marca confus√£o com interroga√ß√£o se tiver palavras de confus√£o
 *    - Considera contexto de problema real vs pergunta casual
 *    - Analisa intensificadores apenas em contextos apropriados
 * 
 * RESULTADO: Precis√£o muito maior, menos falsos positivos de confus√£o,
 *           melhor experi√™ncia do usu√°rio com respostas adequadas ao contexto.
 */

import { EmotionalAnalysis } from '../types'

const emotionalKeywords = {
  happy: ['feliz', 'alegre', 'animado', 'contente', 'satisfeito', 'empolgado', 'bem', '√≥timo', 'maravilhoso', 'incr√≠vel', 'radiante', 'euf√≥rico'],
  sad: ['triste', 'deprimido', 'desanimado', 'abatido', 'melanc√≥lico', 'mal', 'p√©ssimo', 'ruim', 'chateado', 'desalentado', 'desolado'],
  anxious: ['ansioso', 'nervoso', 'preocupado', 'tenso', 'estressado', 'inquieto', 'agitado', 'aflito', 'apreensivo', 'angustiado'],
  motivated: ['motivado', 'determinado', 'focado', 'produtivo', 'energizado', 'inspirado', 'pronto', 'vamos', 'decidido', 'resoluto'],
  tired: ['cansado', 'exausto', 'esgotado', 'fatigado', 'sonolento', 'acabado', 'sem energia', 'drenado', 'desgastado'],
  focused: ['concentrado', 'focado', 'atento', 'determinado', 'direcionado', 'centrado', 'na zona', 'ligado'],
  stressed: ['estressado', 'sobrecarregado', 'pressionado', 'tenso', 'sob press√£o', 'sufocado', 'oprimido'],
  
  // Estados emocionais refinados - removidas palavras gen√©ricas
  confused: ['confuso', 'perdido', 'desorientado', 'sem rumo', 'sem dire√ß√£o', 'atrapalhado', 'bagun√ßado'],
  overwhelmed: ['sobrecarregado', 'assoberbado', 'sufocado', 'esmagado', 'dominado', 'cercado', 'bombardeado'],
  procrastinating: ['procrastinando', 'enrolando', 'empurrando', 'adiando', 'evitando', 'fugindo', 'esquivando'],
  excited: ['empolgado', 'animado', 'entusiasmado', 'euf√≥rico', 'radiante', 'vibrando', 'el√©trico'],
  determined: ['determinado', 'decidido', 'resoluto', 'firme', 'comprometido', 'focado', 'obstinado'],
  frustrated: ['frustrado', 'irritado', 'chateado', 'aborrecido', 'contrariado', 'impaciente', 'exasperado'],
  calm: ['calmo', 'tranquilo', 'sereno', 'pac√≠fico', 'relaxado', 'zen', 'equilibrado'],
  energetic: ['energ√©tico', 'cheio de energia', 'el√©trico', 'vibrante', 'din√¢mico', 'ativo', 'disposto'],
  melancholy: ['melanc√≥lico', 'pensativo', 'reflexivo', 'nost√°lgico', 'contemplatvo', 'introspectivo'],
  hopeful: ['esperan√ßoso', 'otimista', 'confiante', 'positivo', 'animado', 'encorajado'],
  stuck: ['preso', 'travado', 'bloqueado', 'emperrado', 'parado', 'estagnado', 'sem sa√≠da'],
  curious: ['curioso', 'interessado', 'querendo saber', 'intrigado'],

  // CATEGORIAS REFINADAS - removidas express√µes muito gen√©ricas
  desmotivacao: [
    'desmotivado', 'sem vontade', 'desanimado', 'ap√°tico', 'desencorajado',
    'sem energia', 'largado', 'desinteressado', 'sem pique', 'sem √¢nimo',
    't√¥ largado', 'sem g√°s', 'desestimulado'
  ],
  
  procrastinacao: [
    'procrastinando', 'empurrando', 'adiando', 'enrolando', 'deixando pra depois',
    'n√£o t√¥ afim', 'depois eu fa√ßo', 'amanh√£ eu vejo', 'ainda n√£o', 
    'evitando', 'fugindo', 'escapando', 'esquivando', 'postergando'
  ],
  
  confusao: [
    'meio perdido', 'sem dire√ß√£o', 'bagun√ßado',
    't√¥ boiando', 'n√£o t√¥ entendendo nada', 'completamente perdido',
    'muito confuso', 'super confuso'
  ],
  
  sobrecarregado: [
    'sobrecarregado', 'muito pra fazer', 'n√£o dou conta', 'pesado demais',
    'bombardeado', 'sufocado', 'dominado', 'esmagado', 'cercado',
    'muita press√£o', 'muita coisa', 'n√£o aguento', 't√° demais'
  ],
  
  entusiasmo: [
    'entusiasmado', 'empolgado', 'animad√≠ssimo', 'super motivado',
    'cheio de energia', 'que legal', 'incr√≠vel', 'fant√°stico', 'adorei',
    'que m√°ximo', 'show', 'demais', 'vibrando', 'el√©trico'
  ],
  
  foco: [
    'focado', 'concentrado', 'na zona', 'ligado', 'atento', 'centrado',
    'determinado', 'direcionado', 'em modo trabalho', 'produtivo',
    'no flow', 'mergulhado', 'imerso', 'dedicado'
  ]
}

// Express√µes que indicam REAL confus√£o emocional (n√£o apenas perguntas)
const realConfusionExpressions = [
  'n√£o sei por onde come√ßar',
  'estou completamente perdido',
  'n√£o fa√ßo ideia do que fazer',
  't√¥ meio perdido aqui',
  'n√£o entendo direito o que t√° acontecendo',
  't√° tudo confuso na minha cabe√ßa',
  'n√£o consigo organizar as ideias',
  'estou muito confuso sobre isso',
  'n√£o sei mais o que fazer',
  't√¥ totalmente perdido'
]

// Padr√µes que indicam perguntas informacionais (N√ÉO confus√£o)
const informationalQuestionPatterns = [
  /^como (fazer|funciona|posso)/i,
  /^qual (√©|seria|seria)/i,
  /^onde (fica|posso|est√°)/i,
  /^quando (√©|seria|vai)/i,
  /^por que|porque/i,
  /^o que (√©|seria|significa)/i,
  /^quem (√©|foi|criou|desenvolveu)/i,
  /^voc√™ (pode|consegue|sabe)/i,
  /^tem como/i,
  /^existe (algum|alguma)/i,
  /^me (explica|conta|fala)/i
]

// Express√µes indiretas refinadas - mais espec√≠ficas
const indirectEmotionalExpressions = {
  confused: realConfusionExpressions,
  
  overwhelmed: [
    '√© muita coisa pra hoje',
    'n√£o vai dar tempo de tudo',
    't√° muito pesado hoje',
    'muita press√£o em cima de mim',
    'n√£o consigo dar conta de tudo',
    't√° sufocante essa rotina',
    'muita demanda hoje',
    'bombardeado de coisas pra fazer'
  ],
  
  procrastinating: [
    'vou deixar pra depois',
    'n√£o t√¥ no clima hoje',
    'amanh√£ eu come√ßo',
    'depois eu vejo isso',
    'n√£o t√¥ afim agora',
    'vou empurrar um pouco',
    'ainda n√£o √© hora',
    'deixa quieto por hoje'
  ],
  
  stuck: [
    'n√£o sai do lugar',
    'n√£o evolui nada',
    't√¥ travado nesse ponto',
    'n√£o consigo avan√ßar',
    'empacou completamente',
    'n√£o vai pra frente',
    't√¥ bloqueado nisso',
    'n√£o flui de jeito nenhum'
  ],
  
  frustrated: [
    'que saco isso',
    't√° muito dif√≠cil',
    'n√£o funciona de jeito nenhum',
    'que droga de situa√ß√£o',
    'n√£o vai nunca',
    'que chatice',
    'que coisa irritante',
    'n√£o d√° certo nunca'
  ],
  
  tired: [
    't√¥ completamente acabado',
    'sem energia nenhuma',
    'exausto demais',
    'n√£o aguento mais hoje',
    't√¥ totalmente drenado',
    'sem pique nenhum',
    'morto de cansa√ßo'
  ],
  
  excited: [
    'que legal demais',
    'adorei muito isso',
    'que m√°ximo essa ideia',
    'muito bom mesmo',
    'incr√≠vel essa oportunidade',
    'fant√°stico isso',
    'show de bola'
  ],

  desmotivacao: [
    'n√£o tenho vontade de fazer nada hoje',
    't√¥ sem pique pra qualquer coisa',
    'sem √¢nimo pra nada mesmo',
    't√¥ muito largado',
    'nada me anima hoje',
    'sem g√°s pra qualquer coisa',
    't√¥ muito ap√°tico',
    'nada desperta meu interesse'
  ],
  
  sobrecarregado: [
    'muita coisa pra pouco tempo',
    'agenda imposs√≠vel hoje',
    'mil coisas pra resolver',
    'n√£o tem como dar conta',
    'agenda super apertada',
    'muita demanda junta'
  ],
  
  entusiasmo: [
    'que energia boa hoje',
    't√¥ super animado com isso',
    'que empolga√ß√£o total',
    't√¥ vibrando de alegria',
    'adorando demais a ideia',
    't√¥ el√©trico hoje',
    'cheio de energia boa'
  ],
  
  foco: [
    't√¥ super concentrado',
    'no modo trabalho total',
    'foco m√°ximo agora',
    'mente totalmente ligada',
    'concentra√ß√£o de 100%',
    'na zona de produtividade',
    'mergulhado no trabalho',
    'dedica√ß√£o total hoje'
  ]
}

// Palavras que intensificam emo√ß√µes
const intensifiers = ['muito', 'super', 'extremamente', 'completamente', 'totalmente', 'absurdamente', 'demais', 'mega', 'ultra']

// Palavras que indicam necessidade de suporte REAL
const supportIndicators = [
  'me ajude por favor', 'preciso muito de ajuda', 'n√£o dou conta sozinho', 
  't√¥ perdido mesmo', 'me orienta', 'n√£o aguento mais', 'dif√≠cil demais pra mim',
  'n√£o sei mesmo como', 'me explica direito', 'como faz isso'
]

// üéØ NOVA ADI√á√ÉO: Padr√µes que N√ÉO devem ser considerados emocionalmente intensos
const neutralPatterns = [
  // Perguntas t√©cnicas/profissionais
  /como (fazer|criar|configurar|instalar|usar)/i,
  /qual (√©|seria) (o|a) (melhor|forma|jeito)/i,
  /onde (encontro|posso|fica)/i,
  /tem (algum|alguma|como)/i,
  
  // Express√µes cotidianas neutras
  /obrigado/i, /valeu/i, /legal/i, /entendi/i, /certo/i, /ok/i,
  /bom dia/i, /boa tarde/i, /boa noite/i, /oi/i, /ol√°/i,
  
  // Confirma√ß√µes e agradecimentos
  /perfeito/i, /show/i, /massa/i, /beleza/i
]

// üéØ NOVA ADI√á√ÉO: Contextos que reduzem intensidade emocional
const casualContexts = [
  's√≥ queria saber', 's√≥ uma d√∫vida', 'rapidinho', 's√≥ pra confirmar',
  'me tira uma d√∫vida', 'uma pergunta r√°pida', 's√≥ checando'
]

export function analyzeEmotion(message: string): EmotionalAnalysis {
  const lowerMessage = message.toLowerCase()
  const detectedEmotions: Record<string, number> = {}
  const foundKeywords: string[] = []
  const contextualClues: string[] = []
  let emotionalIntensity: 'low' | 'medium' | 'high' = 'low'
  let needsSupport = false

  // üéØ VERIFICA√á√ÉO DE NEUTRALIDADE PRIMEIRO
  const isNeutralPattern = neutralPatterns.some(pattern => pattern.test(message))
  const isCasualContext = casualContexts.some(context => lowerMessage.includes(context))
  
  if (isNeutralPattern || isCasualContext) {
    contextualClues.push('Padr√£o neutro/casual detectado - reduzindo intensidade emocional')
  }

  // üéØ NOVA L√ìGICA: Verifica se √© pergunta informacional primeiro
  const isInformationalQuestion = isInformationalQuestionCheck(message)
  if (isInformationalQuestion) {
    contextualClues.push('Pergunta informacional detectada - n√£o indica confus√£o emocional')
    
    // Se √© pergunta informacional, classifica como curiosidade, n√£o confus√£o
    detectedEmotions.curious = 2
    foundKeywords.push('pergunta informacional')
    
    return {
      detectedMood: 'curious',
      confidence: 0.8,
      keywords: foundKeywords,
      responseStrategy: 'guide',
      emotionalIntensity: 'low',
      needsSupport: false,
      contextualClues
    }
  }

  // Analisa express√µes indiretas primeiro (mais espec√≠ficas e peso maior)
  Object.entries(indirectEmotionalExpressions).forEach(([emotion, expressions]) => {
    expressions.forEach(expression => {
      if (lowerMessage.includes(expression)) {
        // üéØ AJUSTE: Reduz peso se for contexto neutro/casual
        const weight = (isNeutralPattern || isCasualContext) ? 2 : 3
        detectedEmotions[emotion] = (detectedEmotions[emotion] || 0) + weight
        foundKeywords.push(expression)
        contextualClues.push(`Express√£o indireta de ${emotion}: "${expression}"`)
      }
    })
  })

  // Analisa palavras-chave diretas (peso reduzido)
  Object.entries(emotionalKeywords).forEach(([emotion, keywords]) => {
    keywords.forEach(keyword => {
      if (lowerMessage.includes(keyword)) {
        // üéØ AJUSTE: Peso ainda menor para contextos casuais
        const weight = (isNeutralPattern || isCasualContext) ? 0.4 : 0.8
        detectedEmotions[emotion] = (detectedEmotions[emotion] || 0) + weight
        foundKeywords.push(keyword)
      }
    })
  })

  // Detecta intensificadores
  const hasIntensifier = intensifiers.some(intensifier => lowerMessage.includes(intensifier))
  if (hasIntensifier && !isNeutralPattern) { // N√£o amplifica se for padr√£o neutro
    emotionalIntensity = 'high'
    Object.keys(detectedEmotions).forEach(emotion => {
      detectedEmotions[emotion] *= 1.5
    })
    contextualClues.push(`Intensificador detectado: emo√ß√£o amplificada`)
  }

  // Detecta necessidade de suporte REAL
  needsSupport = supportIndicators.some(indicator => lowerMessage.includes(indicator))
  if (needsSupport) {
    contextualClues.push(`Indicadores de necessidade de suporte detectados`)
  }

  // An√°lise contextual melhorada
  analyzeImprovedContextualClues(lowerMessage, detectedEmotions, contextualClues, isInformationalQuestion, isNeutralPattern || isCasualContext)

  // üéØ FILTRO DE RU√çDO: Remove emo√ß√µes com pontua√ß√£o muito baixa
  Object.keys(detectedEmotions).forEach(emotion => {
    if (detectedEmotions[emotion] < 0.5) {
      delete detectedEmotions[emotion]
      contextualClues.push(`Emo√ß√£o "${emotion}" removida por pontua√ß√£o baixa`)
    }
  })

  // üéØ SISTEMA DE VALIDA√á√ÉO FINAL
  const validatedEmotions = validateEmotionalClassification(detectedEmotions, message, contextualClues)

  // Determina intensidade baseada na pontua√ß√£o total
  const totalScore = Object.values(validatedEmotions).reduce((sum, score) => sum + score, 0)
  if (totalScore >= 4) emotionalIntensity = 'high'
  else if (totalScore >= 2) emotionalIntensity = 'medium'

  // Encontra a emo√ß√£o dominante
  const dominantEmotion = Object.entries(validatedEmotions)
    .sort(([,a], [,b]) => b - a)[0]

  const detectedMood = dominantEmotion 
    ? dominantEmotion[0] as EmotionalAnalysis['detectedMood']
    : 'neutral'
  
  const confidence = dominantEmotion 
    ? Math.min(dominantEmotion[1] / 4, 1) // Ajustado para nova pontua√ß√£o
    : 0

  // üéØ AJUSTE FINAL: Reduz confian√ßa para contextos casuais
  const finalConfidence = (isNeutralPattern || isCasualContext) 
    ? Math.max(confidence - 0.3, 0.1) 
    : confidence

  // Define estrat√©gia de resposta
  const responseStrategy = getAdvancedResponseStrategy(detectedMood, emotionalIntensity, needsSupport)

  return {
    detectedMood,
    confidence: finalConfidence,
    keywords: foundKeywords,
    responseStrategy,
    emotionalIntensity,
    needsSupport,
    contextualClues
  }
}

/**
 * üéØ NOVA FUN√á√ÉO: Detecta se √© pergunta informacional
 */
function isInformationalQuestionCheck(message: string): boolean {
  const lowerMessage = message.toLowerCase()
  
  // Verifica padr√µes de pergunta informacional
  const hasInformationalPattern = informationalQuestionPatterns.some(pattern => 
    pattern.test(lowerMessage)
  )
  
  // Verifica se tem sinais de confus√£o emocional real
  const hasRealConfusionSigns = realConfusionExpressions.some(expression =>
    lowerMessage.includes(expression)
  )
  
  // Se tem padr√£o informacional E N√ÉO tem sinais de confus√£o real = pergunta informacional
  return hasInformationalPattern && !hasRealConfusionSigns
}

/**
 * üéØ AN√ÅLISE CONTEXTUAL MELHORADA
 */
function analyzeImprovedContextualClues(
  message: string, 
  detectedEmotions: Record<string, number>,
  contextualClues: string[],
  isInformationalQuestion: boolean,
  isNeutralContext?: boolean
) {
  // Pontua√ß√£o REFINADA - n√£o penaliza perguntas normais
  if (message.includes('...')) {
    detectedEmotions.melancholy = (detectedEmotions.melancholy || 0) + 0.5
    // S√≥ adiciona confus√£o se n√£o for pergunta informacional
    if (!isInformationalQuestion) {
      const confusionWeight = isNeutralContext ? 0.1 : 0.3
      detectedEmotions.confusao = (detectedEmotions.confusao || 0) + confusionWeight
    }
    contextualClues.push('Retic√™ncias indicam hesita√ß√£o/melancolia')
  }
  
  // INTERROGA√á√ÉO: S√≥ indica confus√£o se tiver outros sinais
  if (message.includes('?') && !isInformationalQuestion) {
    const confusionWords = ['perdido', 'confuso', 'n√£o entendo', 'n√£o fa√ßo ideia']
    const hasConfusionWords = confusionWords.some(word => message.toLowerCase().includes(word))
    
    if (hasConfusionWords && !isNeutralContext) {
      detectedEmotions.confusao = (detectedEmotions.confusao || 0) + 0.5
      contextualClues.push('Interroga√ß√£o + palavras de confus√£o indicam d√∫vida genu√≠na')
    }
  }
  
  const exclamationCount = (message.match(/!/g) || []).length
  if (exclamationCount >= 2 && !isNeutralContext) {
    detectedEmotions.entusiasmo = (detectedEmotions.entusiasmo || 0) + 1
    detectedEmotions.excited = (detectedEmotions.excited || 0) + 0.5
    contextualClues.push(`M√∫ltiplas exclama√ß√µes (${exclamationCount}) indicam entusiasmo`)
  }

  // Padr√µes de linguagem REFINADOS
  // S√≥ marca confus√£o se for contexto de problema real
  const hasRealProblemContext = ['projeto', 'trabalho', 'situa√ß√£o', 'problema', 'vida'].some(word => 
    message.toLowerCase().includes(word)
  )
  
  if (message.includes('n√£o') && (message.includes('consigo') || message.includes('sei')) && hasRealProblemContext && !isNeutralContext) {
    detectedEmotions.confusao = (detectedEmotions.confusao || 0) + 0.8
    detectedEmotions.desmotivacao = (detectedEmotions.desmotivacao || 0) + 0.5
    contextualClues.push('Padr√£o "n√£o consigo/sei" em contexto problem√°tico indica confus√£o real')
  }

  if (message.includes('preciso') || message.includes('tenho que')) {
    const motivationWeight = isNeutralContext ? 0.2 : 0.5
    detectedEmotions.motivated = (detectedEmotions.motivated || 0) + motivationWeight
    detectedEmotions.foco = (detectedEmotions.foco || 0) + motivationWeight
    contextualClues.push('Linguagem de necessidade/obriga√ß√£o indica motiva√ß√£o/foco')
  }

  // Outros padr√µes ajustados para contexto...
  const procrastinationTimeWords = ['depois', 'mais tarde', 'amanh√£', 'pr√≥xima', 'quando der']
  if (procrastinationTimeWords.some(word => message.includes(word)) && !isNeutralContext) {
    detectedEmotions.procrastinacao = (detectedEmotions.procrastinacao || 0) + 1
    contextualClues.push('Linguagem temporal indica procrastina√ß√£o')
  }

  if ((message.includes('muito') || message.includes('muita')) && 
      (message.includes('coisa') || message.includes('trabalho') || message.includes('tarefa')) &&
      !isNeutralContext) {
    detectedEmotions.sobrecarregado = (detectedEmotions.sobrecarregado || 0) + 1
    contextualClues.push('Quantificadores de sobrecarga detectados')
  }

  const positiveIntense = ['adorei', 'amei', 'perfeito', 'incr√≠vel', 'fant√°stico', 'maravilhoso']
  if (positiveIntense.some(word => message.includes(word))) {
    const enthusiasmWeight = isNeutralContext ? 0.5 : 1
    detectedEmotions.entusiasmo = (detectedEmotions.entusiasmo || 0) + enthusiasmWeight
    detectedEmotions.excited = (detectedEmotions.excited || 0) + enthusiasmWeight
    contextualClues.push('Express√µes positivas intensas detectadas')
  }

  const focusWords = ['concentrado', 'focado', 'produtivo', 'trabalhando', 'fazendo']
  if (focusWords.some(word => message.includes(word))) {
    const focusWeight = isNeutralContext ? 0.5 : 1
    detectedEmotions.foco = (detectedEmotions.foco || 0) + focusWeight
    contextualClues.push('Indicadores de foco/concentra√ß√£o detectados')
  }
}

function getAdvancedResponseStrategy(
  mood: EmotionalAnalysis['detectedMood'], 
  intensity: 'low' | 'medium' | 'high',
  needsSupport: boolean
): EmotionalAnalysis['responseStrategy'] {
  
  if (needsSupport) {
    return 'support'
  }

  switch (mood) {
    case 'confused':
    case 'confusao':
      return intensity === 'high' ? 'guide' : 'structure'
    
    case 'overwhelmed':
    case 'sobrecarregado':
      return intensity === 'high' ? 'calm' : 'structure'
    
    case 'procrastinating':
    case 'procrastinacao':
      return intensity === 'high' ? 'gentle_push' : 'motivate'
    
    case 'stuck':
      return 'guide'
    
    case 'frustrated':
      return intensity === 'high' ? 'empathize' : 'reassure'
    
    case 'excited':
    case 'entusiasmo':
      return 'energize'
    
    case 'determined':
    case 'foco':
      return 'challenge'
    
    case 'tired':
      return intensity === 'high' ? 'calm' : 'support'
    
    case 'anxious':
    case 'stressed':
      return intensity === 'high' ? 'ground' : 'calm'
    
    case 'sad':
    case 'melancholy':
    case 'desmotivacao':
      return intensity === 'high' ? 'empathize' : 'encourage'
    
    case 'happy':
    case 'energetic':
      return 'energize'
    
    case 'motivated':
    case 'focused':
      return 'challenge'
    
    case 'hopeful':
      return 'encourage'
    
    case 'calm':
      return 'motivate'
    
    case 'curious':
      return 'guide'
    
    case 'proud':
      return 'share_origin'
    
    default:
      return 'motivate'
  }
}

export function getEmotionalTone(strategy: EmotionalAnalysis['responseStrategy']): 'supportive' | 'motivational' | 'calm' | 'enthusiastic' | 'gentle' {
  switch (strategy) {
    case 'support':
    case 'empathize':
      return 'supportive'
    case 'calm':
    case 'ground':
      return 'calm'
    case 'energize':
    case 'challenge':
      return 'enthusiastic'
    case 'encourage':
    case 'motivate':
      return 'motivational'
    case 'guide':
    case 'structure':
    case 'reassure':
    case 'gentle_push':
      return 'gentle'
    default:
      return 'gentle'
  }
}

/**
 * üéØ NOVA FUN√á√ÉO: An√°lise emocional com contexto conversacional
 * Considera o hist√≥rico da conversa para melhorar a precis√£o
 */
export function analyzeEmotionWithContext(
  message: string, 
  conversationContext?: any
): EmotionalAnalysis {
  const baseAnalysis = analyzeEmotion(message)
  
  // Se n√£o h√° contexto, retorna an√°lise b√°sica
  if (!conversationContext || !conversationContext.conversationHistory) {
    return baseAnalysis
  }
  
  const history = conversationContext.conversationHistory
  const recentEmotions = history.slice(-3).map((entry: any) => entry.detectedEmotion)
  
  // üéØ AJUSTES BASEADOS NO CONTEXTO
  
  // Se o usu√°rio tem hist√≥rico de perguntas informacionais, reduz chance de confus√£o
  const recentQuestions = history.slice(-5).filter((entry: any) => 
    entry.userMessage.includes('?') && !entry.detectedEmotion.includes('confus')
  )
  
  if (recentQuestions.length >= 2 && baseAnalysis.detectedMood === 'confused') {
    // Usu√°rio tem padr√£o de fazer perguntas - provavelmente √© curiosidade
    return {
      ...baseAnalysis,
      detectedMood: 'curious',
      confidence: Math.max(baseAnalysis.confidence - 0.3, 0.1),
      contextualClues: [
        ...baseAnalysis.contextualClues,
        `Hist√≥rico de perguntas informacionais detectado - reclassificado como curiosidade`
      ]
    }
  }
  
  // Se h√° padr√£o consistente de emo√ß√£o, ajusta confian√ßa
  const dominantRecentEmotion = getMostFrequentEmotion(recentEmotions)
  if (dominantRecentEmotion && dominantRecentEmotion === baseAnalysis.detectedMood) {
    return {
      ...baseAnalysis,
      confidence: Math.min(baseAnalysis.confidence + 0.2, 1),
      contextualClues: [
        ...baseAnalysis.contextualClues,
        `Padr√£o emocional consistente detectado - confian√ßa aumentada`
      ]
    }
  }
  
  // Se h√° mudan√ßa brusca de emo√ß√£o, reduz confian√ßa
  const lastEmotion = recentEmotions[recentEmotions.length - 1]
  if (lastEmotion && isEmotionallyOpposite(lastEmotion, baseAnalysis.detectedMood)) {
    return {
      ...baseAnalysis,
      confidence: Math.max(baseAnalysis.confidence - 0.4, 0.1),
      contextualClues: [
        ...baseAnalysis.contextualClues,
        `Mudan√ßa brusca de emo√ß√£o detectada - confian√ßa reduzida`
      ]
    }
  }
  
  return baseAnalysis
}

/**
 * Encontra a emo√ß√£o mais frequente em uma lista
 */
function getMostFrequentEmotion(emotions: string[]): string | null {
  if (!emotions.length) return null
  
  const frequency: Record<string, number> = {}
  emotions.forEach(emotion => {
    frequency[emotion] = (frequency[emotion] || 0) + 1
  })
  
  return Object.entries(frequency)
    .sort(([,a], [,b]) => b - a)[0]?.[0] || null
}

/**
 * Verifica se duas emo√ß√µes s√£o opostas
 */
function isEmotionallyOpposite(emotion1: string, emotion2: string): boolean {
  const opposites: Record<string, string[]> = {
    'happy': ['sad', 'frustrated', 'tired'],
    'sad': ['happy', 'excited', 'energetic'],
    'excited': ['tired', 'sad', 'desmotivacao'],
    'frustrated': ['happy', 'calm', 'satisfied'],
    'calm': ['anxious', 'frustrated', 'stressed'],
    'anxious': ['calm', 'relaxed'],
    'motivated': ['desmotivacao', 'tired'],
    'desmotivacao': ['motivated', 'excited', 'energetic']
  }
  
  return opposites[emotion1]?.includes(emotion2) || false
}

/**
 * üéØ SISTEMA DE VALIDA√á√ÉO FINAL
 * Aplica l√≥gica de sanidade para prevenir classifica√ß√µes incorretas
 */
function validateEmotionalClassification(
  detectedEmotions: Record<string, number>, 
  originalMessage: string,
  contextualClues: string[]
): Record<string, number> {
  const lowerMessage = originalMessage.toLowerCase()
  const validatedEmotions = { ...detectedEmotions }
  
  // üéØ REGRA 1: Cumprimentos n√£o s√£o confus√£o
  const greetingPatterns = [
    /^(oi|ol√°|hey|e a√≠|opa|fala)/i,
    /(bom dia|boa tarde|boa noite)/i,
    /^(tchau|at√©|falou|valeu)/i
  ]
  
  const isGreeting = greetingPatterns.some(pattern => pattern.test(originalMessage.trim()))
  if (isGreeting && validatedEmotions.confusao) {
    delete validatedEmotions.confusao
    contextualClues.push('Valida√ß√£o: Cumprimento detectado - confus√£o removida')
  }
  
  // üéØ REGRA 2: Agradecimentos s√£o positivos, n√£o neutros
  const thankPatterns = [
    /obrigad[oa]/i, /valeu/i, /muito bom/i, /legal/i, /show/i
  ]
  
  const isThanking = thankPatterns.some(pattern => pattern.test(lowerMessage))
  if (isThanking && Object.keys(validatedEmotions).length === 0) {
    validatedEmotions.happy = 1.5
    contextualClues.push('Valida√ß√£o: Agradecimento detectado - classificado como positivo')
  }
  
  // üéØ REGRA 3: Perguntas t√©cnicas espec√≠ficas n√£o s√£o confus√£o emocional
  const technicalQuestionPatterns = [
    /como (instalar|configurar|usar|fazer|criar)/i,
    /qual (comando|fun√ß√£o|biblioteca|framework)/i,
    /onde (encontro|baixo|instalo)/i,
    /(error|erro|exception|bug)/i
  ]
  
  const isTechnicalQuestion = technicalQuestionPatterns.some(pattern => pattern.test(lowerMessage))
  if (isTechnicalQuestion && validatedEmotions.confusao) {
    // Reduz drasticamente ou remove confus√£o
    if (validatedEmotions.confusao <= 1) {
      delete validatedEmotions.confusao
    } else {
      validatedEmotions.confusao *= 0.3
    }
    // Adiciona curiosidade se n√£o tiver outras emo√ß√µes fortes
    if (Object.keys(validatedEmotions).length <= 1) {
      validatedEmotions.curious = 2
    }
    contextualClues.push('Valida√ß√£o: Pergunta t√©cnica detectada - confus√£o reduzida/removida')
  }
  
  // üéØ REGRA 4: Mensagens muito curtas raramente t√™m emo√ß√£o intensa
  if (originalMessage.trim().length <= 10) {
    Object.keys(validatedEmotions).forEach(emotion => {
      if (validatedEmotions[emotion] > 2) {
        validatedEmotions[emotion] = Math.min(validatedEmotions[emotion], 1.5)
      }
    })
    contextualClues.push('Valida√ß√£o: Mensagem curta detectada - intensidade emocional reduzida')
  }
  
  // üéØ REGRA 5: Contradi√ß√µes emocionais (remove emo√ß√µes fracas quando h√° opostas fortes)
  const emotionalOpposites = {
    'happy': ['sad', 'frustrated', 'desmotivacao'],
    'excited': ['tired', 'desmotivacao', 'melancholy'],
    'focused': ['confusao', 'procrastinacao'],
    'motivated': ['desmotivacao', 'procrastinacao'],
    'calm': ['anxious', 'stressed', 'frustrated']
  }
  
  Object.entries(emotionalOpposites).forEach(([emotion, opposites]) => {
    if (validatedEmotions[emotion] && validatedEmotions[emotion] >= 2) {
      opposites.forEach(opposite => {
        if (validatedEmotions[opposite] && validatedEmotions[opposite] < validatedEmotions[emotion]) {
          delete validatedEmotions[opposite]
          contextualClues.push(`Valida√ß√£o: Contradi√ß√£o emocional - ${opposite} removido devido a ${emotion} dominante`)
        }
      })
    }
  })
  
  return validatedEmotions
}
